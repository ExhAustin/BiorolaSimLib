%=========================================================================
% ode_simulation.m
%
% Simulates a ode system using ode45 and saves resulting data to a file
%
% Dependencies:
%	functions/[STATE_EQUATION_FILE] => generated by equation_generation.m
%	functions/[EVENT_FUNCTION_FILES] => generated by equation_generation.m
%=========================================================================
close all;
clear all;
clc;
%%=====================================
% Setup
%======================================
% Simulation parameters 
UI = 1; % ***toggle show simulation progress on terminal*** (0: off, 1: on)
sim_time = 5; % ***simulation time***
x0 = [0; 1; 0.05; 0]; % ***initial condition vector*** (2*dof-by-1 column vector)

%%=====================================
% Initialization
%======================================
% Setup state equations & event function
addpath('functions');

odeFcn = @ball_sys; %***initial state equation function handle***

eventFcn = @ground_event; %***initial event function handle (@eventFcn_default if no events needed)***
options = odeset('Events', eventFcn);	% add additional ode45 options here if needed

% Time
t_start = 0;
t_finish = sim_time;

% Result containers
T_result = [];
X_result = [];
TE_result = [];
XE_result = [];
IE_result = [];

%%=====================================
% Simulation
%======================================
% Display status
start_time = clock;
if UI == 1
	clc;
	fprintf('Simulating... \n');
end

% Iteratively solve ode
x_start = x0;

while 1
	% Run one instance of ode45
	[T X TE XE IE] = ode45(odeFcn, [t_start t_finish], x_start, options);

	% Record state data
	T_result = [T_result; T];
	X_result = [X_result; X];

	% Record event data (note: events that happen at t_start will be recorded but will not cause ode45 to terminate)
	if length(TE_result) == 0
		idx = 1;
	else
		for i = 1:1:length(TE)
			if TE ~= t_start
				idx = i;
				break;
			end
		end
	end
	TE_result = [TE_result; TE(idx:end)];
	XE_result = [XE_result; XE(idx:end, :)];
	IE_result = [IE_result; IE(idx:end)];

	% End loop if sim_time is reached, otherwise update starting time
	if T(end) ~= sim_time
		% Set new ode initial conditions
		t_start = TE(end);
		x_start = XE(end, :);
	else
		% Simulation complete!
		break;
	end

	% Phase transition
		%***change odeFcn (and eventFcn) here according to IE*** (leave blank if no transitions are required)
	decay = 0.8;
	if ismember(1, IE)
		x_start(4) = - x_start(4)*decay;
	end

	% Other
		%***add additional custom settings here*** (ex: reset states, terminate simulation early)

end

%%=====================================
% Process results
%======================================
% Display status
if UI == 1
	finish_time = clock;
	sim_time = finish_time - start_time;
	sim_time_sec = 3600*sim_time(4) + 60*sim_time(5) + sim_time(6);
	fprintf('Simulation complete.\n');
	fprintf('Execution time: %f second(s)\n', sim_time_sec);
end

% Pack data into a structure
result.dof = length(x0)/2;
result.x0 = x0;
result.T = T_result;
result.X = X_result;
result.TE = TE_result;
result.XE = XE_result;
result.IE = IE_result;
result.datetime = datestr(now, 'yyyy/mm/dd HH:MM:SS');
	%***Add more fields of information about this simulation here(optional)***

% Initialize directory
if exist('results') == 0
	mkdir('results');
end

% Save data to file
if UI == 1
	fprintf('Saving data...\n');
end

filename = datestr(now, 'yyyy-mm-dd_HH-MM-SS');	% customize filename here
pathname = strcat('results/', filename);
save(pathname, 'result');

if UI == 1
	fprintf('Done.\n');
end
